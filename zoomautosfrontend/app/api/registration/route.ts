import { NextRequest } from "next/server";
import connectDB from "@/app/lib/db";
import registration from "@/app/models/registration";
import { isTokenValid } from "@/app/lib/authmiddlewere";
import { NextResponse } from "next/server";
import PDFDocument from "pdfkit";
import fs from "fs-extra";
import nodemailer from "nodemailer";

await connectDB();

import type { NextApiRequest, NextApiResponse } from "next";

interface IRegistration {
  Id: string;
  username: string;
  email: string;
  contactNumber?: string;
  name?: string;
  companyName?: string;
  address?: string;
  postCode?: string;
  city?: string;
  password?: string;
  resetToken?: string;
  resetTokenExpiry?: Date;
  fcmToken?: string | null;
}


type Data =
  | { message: string; Id?: string }
  | { message: string; error: string };


export async function POST(req: NextRequest) {
  await connectDB();

  try {
    const body = await req.json();
    const { username, email, ...formData } = body;

    // Validate username and email
    if (!username) {
      return NextResponse.json({ message: "Username is required" }, { status: 400 });
    }
    if (!email) {
      return NextResponse.json({ message: "Email is required" }, { status: 400 });
    }

    // Check if username/email already exists
    const existingUser = await registration.findOne({ username }).lean();
    const existingEmail = await registration.findOne({ email }).lean();

    if (existingUser && existingEmail) {
      return NextResponse.json({ message: "Email and Username already exist" }, { status: 400 });
    }
    if (existingUser) {
      return NextResponse.json({ message: "Username already exists" }, { status: 400 });
    }
    if (existingEmail) {
      return NextResponse.json({ message: "Email already exists" }, { status: 400 });
    }
    console.time("Query Execution Time");
    // Get last user by Id
    const lastUser = await registration.findOne<Pick<IRegistration, "Id">>({}, { Id: 1 })
  .sort({ Id: -1 })
  .lean();

    console.timeEnd("Query Execution Time");

    // Generate new numeric ID
    const randomTwoDigit = Math.floor(Math.random() * 90) + 10;
    const newId = lastUser?.Id ? Number(lastUser.Id) + randomTwoDigit : 1000 + randomTwoDigit;
    const fnewId = newId.toString();

    // Create and save the new user
    const newAccount = new registration({
      Id: fnewId,
      username,
      email,
      ...formData
    });

    console.time("Database Save Time");
    await newAccount.save();
    console.timeEnd("Database Save Time");

    console.log(`✅ New User Created with Id: ${fnewId}`);
    NextResponse.json({ message: "User registered successfully", Id: fnewId }, { status: 201 });
    console.log(`✅ New User Created with Id: ${fnewId}`);
        // Generate a unique file path for the PDF
        const pdfPath = `./Newaccount_${Date.now()}.pdf`;

        const doc = new PDFDocument();
        const writeStream = fs.createWriteStream(pdfPath);
        doc.pipe(writeStream);

        // PDF Header
        doc.fontSize(20).font('Helvetica-Bold').text('New Account Details', { align: 'center', underline: true });
        doc.moveDown();

        // Add form data to PDF
        const checkAndAddPage = () => {
            const pageHeight = doc.page.height;
            const currentY = doc.y;
            const remainingSpace = pageHeight - currentY;

            if (remainingSpace <= 100) {
                doc.addPage();
            }
        };

        Object.keys(formData).forEach((key) => {
            const capitalizedKey = key.charAt(0).toUpperCase() + key.slice(1);
            if (capitalizedKey === 'Password') return; // Skip password

            checkAndAddPage();
            doc.fontSize(14).font('Helvetica-Bold').text(`${capitalizedKey}:`, { align: 'left' });
            doc.fontSize(12).font('Helvetica').text(`${formData[key]}`, { align: 'left' });
            doc.moveDown();
        });

        // Footer
        doc.fontSize(10).text('Generated by Zoom Autos', { align: 'center' });
        doc.end();

        // Wait for the PDF to be written
        await new Promise<void>((resolve, reject) => {
            writeStream.on('finish', resolve);
            writeStream.on('error', reject);
        });

        // Create PDF buffer
        const pdfBuffer = fs.readFileSync(pdfPath);
        let mail=email;
const mailtransporter = nodemailer.createTransport({
            host: "smtp.office365.com",
            port: 587,
            secure: false,
            auth: {
                user: process.env.ADMINEMAIL,
                pass: process.env.ADMINEMAIL_PASSWORD
            },
        });
        const transporter2 = nodemailer.createTransport({
            host: "smtp.gmail.com",
            port: 465, 
            secure: true,
            auth: {
                user: process.env.EMAIL,
                pass: process.env.EMAIL_PASSWORD
            }
        });
    
        // Send email with the PDF attached
        const mailOptions = {
            from: process.env.EMAIL,
            to: 'enquiries@zoomautos.co.uk',
            subject: 'Account Submission',
            text: 'Hello,\n\nPlease find attached the PDF of the submitted Account details.',
            html:`
       <!DOCTYPE html>
<html lang="en">
<head>
    <title>Account Submission</title>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
        body { font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 0; margin: 0; }
        .container { max-width: 600px; margin: 20px auto; background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); text-align: center; }
        .details-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        .header {
    background-color: #01103b;
    color: #ffffff;
    padding: 15px;
    font-size: 22px;
    font-weight: bold;
    border-radius: 8px 8px 0 0;
}

        .logo img {
    max-width: 400px;
    height: auto;
    margin-bottom: 20px;
    margin-top: 20px;
}
        .details-table th, .details-table td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; font-weight: bold; }
        .details-table th { background-color: #e9ecf5; border-bottom: 4px solid #01103b; font-weight: bold; color: #01103b; }
        .footer {
    font-size: 14px;
    color: #888888;
    padding: 15px;
    border-top: 1px solid #dddddd;
    margin-top: 20px;
    text-align: center;
}

.footer-icons {
    margin-top: 10px;
    text-align: center;
}

.footer-icons table {
    margin: 0 auto; /* Centers the table */
}

.footer-icons td {
    padding: 5px 15px; /* Adds spacing between icons */
}

.footer-icons a {
    display: inline-flex;
    align-items: center;
    text-decoration: none;
    color: #01103b;
    font-size: 16px;
    gap: 8px; /* Space between icon and text */
}

.footer-icons img {
    width: 24px;
    height: auto;
    vertical-align: middle;
}

/* ✅ EMAIL COMPATIBILITY FIX */
@media screen and (max-width: 600px) {
    .footer-icons {
        flex-direction: column;
        gap: 10px;
    }
}
    </style>
</head>
<body>

    <div class="container">

        <div class="header">Account Registration</div>
    <div class="logo">
            <img src="http://res.cloudinary.com/db2so7dyd/image/upload/v1740368096/upfwvhtd23yoshr2ikhi.png" alt="Logo">
        </div>
        <p><strong>A new Client <span style="font-size: 24px;">${formData.name}</span>,</strong></p>
        <p>has joined Zoom Autos. The Account Details are listed below:</p>

        <div class="email-container">
            <h2>User Details</h2>
            <table class="details-table">
                <tr><th>Name</th><td>${formData.name}</td></tr>
                <tr><th>Username</th><td>${username}</td></tr>
                <tr><th>Contact Number</th><td>${formData.contactNumber}</td></tr>
                <tr><th>Address</th><td>${formData.Address}</td></tr>
                <tr><th>ID</th><td>${newAccount.Id}</td></tr>
                <tr><th>Postcode</th><td>${formData.PostCode}</td></tr>
                <tr><th>Email</th><td>${mail}</td></tr>
            </table>
        </div>
<p>This is system generated Email</p>

        <div class="footer">
            &copy; 2025 localhost:3000. All Rights Reserved.
            <div class="footer-icons">
        <table role="presentation">
            <tr>
                <td>
                    <a href="mailto:support@yourcompany.com">
                        <img src="http://res.cloudinary.com/db2so7dyd/image/upload/v1740369976/p6u9g4qzr5wtf79vso8y.png" 
                             alt="Email">
                        
                    </a>
                </td>
                <td>
                    <a href="tel:+123456789">
                        <img src="http://res.cloudinary.com/db2so7dyd/image/upload/v1740371417/ygwvpwqklbcw3prejjhx.png" 
                             alt="Call">
                        
                    </a>
                </td>
            </tr>
        </table>
    </div>
</div>


        </div>
    </div>
</body>
</html>`
        };
        console.log("Email being sent to: ", email);

        const mailOptions2 = {
            from: process.env.ADMINEMAIL,
            to: email,
            subject: 'Account Registration',
            text: 'Hello,\n\nPlease find attached the PDF of the submitted Account details.',
            html:`
       <!DOCTYPE html>
<html lang="en">
<head>
    <title>Reset Your Password</title>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
        body { font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 0; margin: 0; }
        .container { max-width: 600px; margin: 20px auto; background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); text-align: center; }
        .details-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        .header {
    background-color: #01103b;
    color: #ffffff;
    padding: 15px;
    font-size: 22px;
    font-weight: bold;
    border-radius: 8px 8px 0 0;
}

        .logo img {
    max-width: 400px;
    height: auto;
    margin-bottom: 20px;
    margin-top: 20px;
}
        .details-table th, .details-table td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; font-weight: bold; }
        .details-table th { background-color: #e9ecf5; border-bottom: 4px solid #01103b; font-weight: bold; color: #01103b; }
        .footer {
    font-size: 14px;
    color: #888888;
    padding: 15px;
    border-top: 1px solid #dddddd;
    margin-top: 20px;
    text-align: center;
}

.footer-icons {
    margin-top: 10px;
    text-align: center;
}

.footer-icons table {
    margin: 0 auto; /* Centers the table */
}

.footer-icons td {
    padding: 5px 15px; /* Adds spacing between icons */
}

.footer-icons a {
    display: inline-flex;
    align-items: center;
    text-decoration: none;
    color: #01103b;
    font-size: 16px;
    gap: 8px; /* Space between icon and text */
}

.footer-icons img {
    width: 24px;
    height: auto;
    vertical-align: middle;
}

/* ✅ EMAIL COMPATIBILITY FIX */
@media screen and (max-width: 600px) {
    .footer-icons {
        flex-direction: column;
        gap: 10px;
    }
}
    </style>
</head>
<body>

    <div class="container">

        <div class="header">Account Registration</div>
    <div class="logo">
            <img src="http://res.cloudinary.com/db2so7dyd/image/upload/v1740368096/upfwvhtd23yoshr2ikhi.png" alt="Logo">
        </div>
        <p><strong>Hi <span style="font-size: 24px;">${formData.name}</span>,</strong></p>
        <p>We're excited to have you on board! Thank you for joining us. Below are your account details:</p>

        <div class="email-container">
            <h2>User Details</h2>
            <table class="details-table">
                <tr><th>Name</th><td>${formData.name}</td></tr>
                <tr><th>Username</th><td>${username}</td></tr>
                <tr><th>Contact Number</th><td>${formData.contactNumber}</td></tr>
                <tr><th>Address</th><td>${formData.Address}</td></tr>
                <tr><th>ID</th><td>${newAccount.Id}</td></tr>
                <tr><th>Postcode</th><td>${formData.PostCode}</td></tr>
                <tr><th>Email</th><td>${mail}</td></tr>
            </table>
        </div>
<p>This is system generated Email</p>

        <div class="footer">
            &copy; 2025 localhost:3000. All Rights Reserved.
            <div class="footer-icons">
        <table role="presentation">
            <tr>
                <td>
                    <a href="mailto:enquiries@zoomautos.co.uk+">
                        <img src="http://res.cloudinary.com/db2so7dyd/image/upload/v1740369976/p6u9g4qzr5wtf79vso8y.png" 
                             alt="Email">
                        
                    </a>
                </td>
                <td>
                    <a href="tel:+123456789">
                        <img src="http://res.cloudinary.com/db2so7dyd/image/upload/v1740371417/ygwvpwqklbcw3prejjhx.png" 
                             alt="Call">
                        
                    </a>
                </td>
            </tr>
        </table>
    </div>
</div>


        </div>
    </div>
</body>
</html>`
        };
        await transporter2.sendMail(mailOptions);
        // await mailtransporter.sendMail(mailOptions2);
    
        // Delete PDF
        await new Promise<void>((resolve) => {
          fs.unlink(pdfPath, (err) => {
            if (err) {
              console.error('Error deleting PDF:', err);
            } else {
              console.log('Temporary PDF file deleted.');
            }
            resolve(); // Always resolve
          });
        });
    
    
    
     
    } catch (err:any) {
        console.error("Error during registration:", err);
    
        // ✅ Only respond if nothing has been sent yet
        return NextResponse.json(
  {
    message: "Something went wrong while registering.",
    error: err instanceof Error ? err.message : "Unknown error",
  },
  { status: 500 }
);

        // Otherwise do nothing — Express will log the error anyway
      }
    };

export async function GET() {
  await connectDB();

  try {
    const users = await registration.find();
    return NextResponse.json(users);
  } catch (error: unknown) {
    const errMsg = error instanceof Error ? error.message : "Unknown error";
    return NextResponse.json({ message: "Error fetching users", error: errMsg }, { status: 500 });
  }
}